name: DigitalOcean CI/CD Pipeline

on:
  push:
    branches: [master, dev]
    tags: ['v*.*.*']
  pull_request:
    branches: [master, dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]
      perform_security_scan:
        description: 'Run full security scan'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '20.12.2'
  FLUTTER_VERSION: '3.13.9'
  DOCKER_REGISTRY: 'registry.digitalocean.com/right-tech'
  SONAR_PROJECT_KEY: 'right-tech-centre'
  BACKEND_PORT: '3000'
  APP_PLATFORM_SPEC_FILE: '.do/app.yaml'
  FRONTEND_SPEC_FILE: '.do/static.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate_structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Verify Directories
        run: |
          [ -d "backend/src" ] || { echo "Missing backend/src directory"; exit 1; }
          [ -f "backend/src/server.js" ] || { echo "Missing server.js"; exit 1; }
          [ -d "frontend/public" ] || { echo "Missing frontend/public directory"; exit 1; }
          [ -f "frontend/public/index.html" ] || { echo "Missing index.html"; exit 1; }
          [ -d "mobile/lib" ] || { echo "Missing mobile/lib directory"; exit 1; }
          [ -f "mobile/lib/main.dart" ] || { echo "Missing main.dart"; exit 1; }

  security_scan:
    name: Security Scanning
    needs: validate_structure
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || inputs.perform_security_scan }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@v0.14.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  backend:
    name: Backend Build & Deploy
    needs: security_scan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backend Dependencies
        working-directory: ./backend/src
        run: npm ci --production
        
      - name: Run Tests
        working-directory: ./backend/src
        run: npm test
        
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/backend:latest
          secrets: |
            "DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"
            
      - name: Deploy to App Platform
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          doctl apps create --spec ${{ env.APP_PLATFORM_SPEC_FILE }}
          doctl apps update-config --env DATABASE_URL=${{ secrets.DO_DATABASE_URL }}

  frontend:
    name: Frontend Build & Deploy
    needs: security_scan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
        
      - name: Deploy to Spaces
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          doctl spaces sync ./frontend/build/ ${{ secrets.DO_SPACES_NAME }}:/ \
            --access-key ${{ secrets.DO_SPACES_ACCESS_KEY }} \
            --secret-key ${{ secrets.DO_SPACES_SECRET_KEY }} \
            --region ${{ secrets.DO_SPACES_REGION }}

  mobile:
    name: Mobile Build
    needs: security_scan
    runs-on: macos-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          
      - name: Install Dependencies
        working-directory: ./mobile
        run: flutter pub get
        
      - name: Build Android APK
        working-directory: ./mobile
        run: flutter build apk --release
        
      - name: Build iOS IPA
        working-directory: ./mobile
        run: flutter build ipa --release

  notify:
    name: Notification
    needs: [backend, frontend, mobile]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Deployment to ${{ inputs.environment || 'production' }} completed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Right Tech Centre Deployment Complete*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ inputs.environment || 'production' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ needs.backend.result }} | ${{ needs.frontend.result }} | ${{ needs.mobile.result }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
